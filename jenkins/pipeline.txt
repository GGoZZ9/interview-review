1. CPS (Continuation-Passing Style）是一种编程风格：所有的控制块都通过 continuation 来显式传递。
简单来说，在CPS风格中，函数不能有返回语句statement，它的调用者要想获得它的结果，需要显式传递一个回调函数来获取结果并继续执行
Pipeline代码是Groovy语言的，其本身并不是CPS风格的，这就需要一个解释器将代码编译成CPS风格，Jenkins里面通过 groovy-cps 这个插件来完成
如果想要持久化 persistence 一个对象的状态，那么这个对象需要是可序列化的（Serializable）。Jenkins如果想要保存Pipeline的状态，就会要求CPS的代码也是可序列化的。
如果有一些代码是不可序列化，或者序列化不安全的，我们可以在Pipeline代码中加上@NonCPS标记。并且，声明了该标记的函数也只能调用其他有该标记的函数。
Jenkins会对这类函数进行常规编译，不生成可序列化的CPS代码
2. 回调函数：作为参数传递给库函数的函数。主程序等待回调函数执行完成 - 同步回调；回调实际是事件驱动编程

3. git flow 改成 trunk based development, 好处是
git flow因为其有一定的复杂度，使用起来较为繁琐，所以一些人员较少的团队并不会使用这个方案。
Git Flow 偏向于控制管理，使用了较多的分支，流程颇为复杂。大量的团队在实践过程中也遇到了颇多问题，其中大部分来自长期存在的分支。基于develop分支或者release分支
并没有做到持续交付，在 Git Flow 分支模型下，发布是非常有计划的，一个 feature 必须要经过一系列步骤才能到达生产环境

trunk based development是一套代码分支管理策略，开发人员之间通过约定向被指定为 主干 的分支提交代码，以此抵抗因为长期存在的多分支导致的开发压力。此举可 避免分支合并的困扰，保证随时拥有可发布的版本 。


/**
     * 声明式适合没有编程经验的初学者，脚本式pipeline，是基于groovy的DSL语言实现的，为Jenkins用户提供了大量的灵活性性和可扩展性
     * 声明式pipeline会得到越来越多的官方支持，可以使用Visual Pipeline Editor来编辑和验证声明式pipeline
     * 如果实在是声明式语法还没有支持的功能，还可以在声明式里直接调用脚本
     *
     * 脚本式pipeline只支持stage，像stages 、steps更细致的阶段划分则不支持
     * 声明式pipeline 使用脚本时则需要使用script { for()}
     * */