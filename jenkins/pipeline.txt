1. CPS (Continuation-Passing Style）是一种编程风格：所有的控制块都通过 continuation 来显式传递。
简单来说，在CPS风格中，函数不能有返回语句，它的调用者要想获得它的结果，需要显式传递一个回调函数来获取结果并继续执行
Pipeline代码是Groovy语言的，其本身并不是CPS风格的，这就需要一个解释器将代码编译成CPS风格，Jenkins里面通过 groovy-cps 这个插件来完成
如果想要持久化一个对象的状态，那么这个对象需要时可序列化的（Serializable）。Jenkins如果想要保存Pipeline的状态，就会要求CPS的代码也是可序列化的。
如果有一些代码是不可序列化，或者序列化不安全的，我们可以在Pipeline代码中加上@NonCPS标记。并且，声明了该标记的函数也只能调用其他有该标记的函数。
Jenkins会对这类函数进行常规编译，不生成可序列化的CPS代码
2. 回调函数：作为参数传递给库函数的函数。主程序等待回调函数执行完成 - 同步回调；回调实际是事件驱动编程
